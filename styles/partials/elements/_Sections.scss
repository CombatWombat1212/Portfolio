@mixin section--heading-bottom-margin($m) {
  &.text--#{$m} + * {
    margin-top: var(--font-margin-bottom-#{$m});
  }

  &.text--#{$m} + *.mt-less {
    margin-top: var(--font-margin-bottom-#{$m}_less);
  }
}

:root {
  --section-gap: 12.5rem;
  --section-gap_half: calc(var(--section-gap) / 2);
}

.pb-section-gap {
  padding-bottom: var(--section-gap);
}

.chapter {
  &--wrapper {
    position: relative;
    // padding-top: var(--section-gap);
    // padding-bottom: var(--section-gap);
  }
}

.section {
  --section-text-spacing: 1.25rem;
  --section-graphic-panel-pad: 2.5rem;

  --section_title-above-offset: -0.425rem;
  // --section-column-arrow-height: 1.7rem;

  &--wrapper {
    padding-top: var(--section-gap);
    position: relative;

    &.mt-less {
      padding-top: calc(var(--section-gap) * 0.5);
    }
    &.mt-less-2 {
      padding-top: calc(var(--section-gap) * 0.25);
    }
    &.mb-less {
      padding-bottom: calc(var(--section-gap) * 0.5);
    }
    &.mb-less-2 {
      padding-bottom: calc(var(--section-gap) * 0.25);
    }
  }

  @include flex-row;

  &--title {
    & + * {
      margin-top: var(--font-margin-bottom-h4);
    }
  }

  &--heading {
    @include section--heading-bottom-margin(h1);
    @include section--heading-bottom-margin(h2);
    @include section--heading-bottom-margin(h3);
    @include section--heading-bottom-margin(h4);

    &__title-above {
      margin-top: var(--section_title-above-offset);
    }
  }

  &--copy {
    @include flex-col-center;

    &__below{
      
    }
  }

  &--description {
    & > * + * {
      margin-top: var(--section-text-spacing);
    }

    & > * + *.mt-less {
      margin-top: calc(var(--section-text-spacing) * 0.15);
    }

    ol,
    ul {
      --counter-width: 1.5rem;

      & > * + * {
        margin-top: var(--section-text-spacing);
      }

      & > * + *.mt-less {
        margin-top: calc(var(--section-text-spacing) * 0.35);
      }

      list-style-position: inside;
    }

    li {
      span {
        display: block;
        margin-top: calc(var(--font-height-body) * -1);
        width: calc(100% - var(--counter-width));
        padding-left: var(--counter-width);
      }
    }

    &__color {
      @include b-rad;
      padding: 2.25rem;
    }
  }

  &--main {
    @include flex-row;
    margin-top: calc(var(--section-text-spacing) * 1.75);
    // position: relative;

    &.mt-less {
      margin-top: calc(var(--section-text-spacing) * 1.25);
    }

    &__grid {
      display: grid;
    }

    &__title-above {
      margin-top: calc((var(--section_title-above-offset) * -1) + var(--font-margin-bottom-h4));
    }
    &__title-below {
      margin-top: 0rem;
    }
  }

  .column {
    // When you add a min width of any value to a column, preferably a value that it wont ever reach cause its such a small number, then the column's width appears to lock at the width it should be, i.e. 2 columns at 50% width, 3 columns at 33.3333%, and so on. not sure why! but it works!
    min-width: 0.1rem;
    position: relative;
  }
}

.section {
  --graphic-scale: 1;

  .graphic {
    --img-panel-height: 12rem;

    // TODO: update all graphics to follow this syntax, and get rid of all the other clutter

    &--mask {
      --w: calc(var(--mw) * var(--graphic-scale));
      --h: calc(var(--mh) * var(--graphic-scale));

      .mask {
        width: var(--w);
        height: var(--h);
        background-color: $col-tertiary;
      }
    }

    &--img {
      display: flex;
      position: relative;

      img {
        @include img-contain;
      }
    }

    &--video {
      display: flex;
      position: relative;
      transition: 0.2s;

      &[data-autoplay-hover="true"] {
        cursor: pointer;
        &.background__background {
          &:hover,
          &:focus,
          &[data-playing="true"] {
            background-color: $col-background_darker;
          }
          &[data-playing="false"] {
            background-color: $col-background!important;
          }
        }
        &.background__background-darker {
          &:hover,
          &:focus,
          &[data-playing="true"] {
            background-color: $col-background_darkest;
          }
          &[data-playing="false"] {
            background-color: $col-background_darker!important;
          }
        }
        &.background__background-darkest {
          &:hover,
          &:focus,
          &[data-playing="true"] {
            background-color: desaturate(darken($col-background_darker, 8),7);
          }
          &[data-playing="false"] {
            background-color: $col-background_darkest!important;
          }
        }
      }

      .video {
        &--foreground {
          @include img-contain;
          z-index: 1;
        }

        &--background {
          position: absolute;
          top: 50%;
          left: 50%;
          width: calc(100% - (var(--section-graphic-panel-pad) * 2));
          height: calc(100% - (var(--section-graphic-panel-pad) * 2));
          z-index: 0;
          transform: translate(-50%, -50%);
        }

        &__hidden {
          opacity: 0;
        }
      }
    }

    &--panel {
      height: var(--img-panel-height);
      @include b-rad;
      @include flex-row-center;
      padding: var(--section-graphic-panel-pad);
      align-items: center;

      &__flexible {
        height: 100% !important;
        padding: 0;
      }
    }

    &--caption {
      margin-top: var(--section-text-spacing);

      &__above {
        margin-top: 0;
        margin-bottom: calc(var(--section-text-spacing) * 0.5);
      }

      &__split {
        @include flex-row-between;
        align-items: flex-end;

        & > * + * {
          margin: 0;
        }
      }

      &.mt-more {
        margin-top: calc(var(--section-text-spacing) * 1.2);
      }

      &.mt-less {
        margin-top: calc(var(--section-text-spacing) * 0.65);
      }
    }

    &--effect {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;

      &__gradient {
        // --color-11;
        // --color-12;
        // --direction;

        z-index: 2;
        background-image: linear-gradient(var(--direction), var(--color-1) 0%, var(--color-2) 140%);
      }

      @include trans;

      &__on.hover {
        opacity: 0;
      }

      &__off.hover {
        opacity: 1;
      }
    }

    &__container {
      padding: 0;

      img,
      .mask {
        margin: var(--section-graphic-panel-pad);
      }
    }

    &__lightbox {
      cursor: zoom-in;

      img {
        @include trans;
        transform: scale(1);

        @include hover(".graphic__lightbox", "img") {
          transform: scale(1.025);
        }
      }
    }
  }
}

// Type variants
.section {
  &__overview {
    justify-content: space-between;

    --gap: 6rem;
    @include gap;

    .section--graphic {
      opacity: 0.3;
    }
  }
}

// Color variants

.section {
  &__color,
  &__image {
    @include pad-y(var(--section-gap));

    &:not(.background__background) * {
      color: $col-background;
    }

    & + & {
      margin-top: 0;
    }
  }
}

.chapter {
  &__color {
    // TODO: fix this ugly ass selector
    & > * > *:not(.background__background) {
      * {
        color: $col-background;
      }

      .mask {
        background-color: $col-background;
      }
    }
  }
}

.background {
  &__color {
  }

  &__background {
    background-color: $col-background;
  }

  &__background-darker {
    background-color: $col-background_darker;

    // TODO: move this to a general class applied to all of these
    & + & {
      padding-top: 0;
    }
  }

  &__background-darkest {
    background-color: $col-background_darkest;

    & + & {
      padding-top: 0;
    }
  }

  &__primary {
    background-color: $col-primary;

    & + & {
      padding-top: 0;
    }
  }

  &__tertiary-makeright {
    background-color: $col-tertiary_makeright;

    & + & {
      padding-top: 0;
    }
  }

  &__tertiary {
    background-color: $col-tertiary;

    & + & {
      padding-top: 0;
    }
  }

  &__tertiary-light {
    background-color: $col-tertiary-light;

    & + & {
      padding-top: 0;
    }
  }
}

// .TEST----THING{
//   background-color:red;
//   transform: scale(20);
// }
