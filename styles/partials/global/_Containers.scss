// // @mixin responsive-down-manual($str, $type, $props, $vals, $un, $min, $max, $map) {

// //[Class name]
// // [map-based or range based]
// // [array of properties]
// // [array of values]
// //////use 'xyz' as if it were 'i' in a js for-loop, if you're using range.
// //////If you're using map based, its more like map[i].
// //////Its a hardcoded variable that refers to the index of the iteration if you're using range, and the value of the map if you're using map-based.
// // [units] none if there are no units
// // [min value] 0 if you're using a map
// // [max value] 0 if you're using a map
// // [map] none if you're using range

$enable-grid-classes: true;

$container-max-width: (
  xs: 100%,
  sm: 32em,
  md: 43em,
  lg: 57em,
  xl: 69em,
  xxl: 95.375rem,
) !default;


// $container-max-width: (
//   xs: 100%,
//   sm: 32em,
//   md: 43em,
//   lg: 57em,
//   xl: 69em,
//   xxl: 82em,
// ) !default;

$container-max-widths_inverted: mapReverse($container-max-width);

@function container-width($w: 100%){
//   @return calc(#{$w} - var(--sidebar-width));
  @return #{$w};
}


@mixin container() {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
}

// @mixin container-padding {
  // @include pad-x(var(--site-pad-x));
// }

@if $enable-grid-classes {
  // Single container class with breakpoint max-widths
  .container,
    // 100% wide container at all breakpoints
    .container-fluid {
    @include container();
  }

  // .container-fluid{
    // @include container-padding;
  // }

  // Responsive containers that are 100% wide until a breakpoint
  //   @each $breakpoint, $container-max-width, $i in $container-max-widths_inverted
  //   {
  @for $i from 1 through length($container-max-widths_inverted) - 1 {
    $breakpoint: nth(map-keys($container-max-widths_inverted), $i);
    $container-max-width: nth(map-values($container-max-widths_inverted), $i);

    //apply the correct container max-width to the correct breakpoint
    //in my sysem, the responsive downwards system, we need to offset the following by one depending on whether or not it is first breakpoint at xxl
    @if $breakpoint == nth(nth($container-max-widths_inverted, 1), 1) {
      .container {
        max-width: container-width($container-max-width);
        @include media-breakpoint-down($breakpoint) {
          $width: nth(map-values($container-max-widths_inverted), $i + 1);
          max-width: container-width($width);
          --site-max-width: #{container-width($width)};

        }
      }
    } @else {
      .container {
        @include media-breakpoint-down($breakpoint) {
          $width: nth(map-values($container-max-widths_inverted), $i + 1);
          max-width: container-width($width);
          --site-max-width: #{container-width($width)};

          //add padding on sm
          // @if $breakpoint == nth(nth($container-max-widths_inverted, -2), 1) {
          //   @include container-padding;
          // }
        }
      }
    }

  }
}
